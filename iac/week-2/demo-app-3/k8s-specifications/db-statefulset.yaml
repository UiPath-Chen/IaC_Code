apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: db
  name: db
spec:
  replicas: 3   # 如果ds名字未db, 那么pod的名字未db-0, db-1, db-2; 主从；结合headless；Pod名称稳定，可以获得稳定的Pod DNS
  selector:
    matchLabels:
      app: db
  serviceName: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
        - image: postgres:15-alpine
          name: postgres
          # for pg_isready command use the following
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: POSTGRES_PASSWORD
          envFrom:
            - secretRef:
                name: db-secret
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - $POSTGRES_USER
                - -d
                - $POSTGRES_USER
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - $POSTGRES_USER
                - -d
                - $POSTGRES_USER
            initialDelaySeconds: 15
            periodSeconds: 20
          ports:
            - containerPort: 5432
              name: postgres
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: db-data
  volumeClaimTemplates:   # 首先配置storageclass; 然后ds自当创建PV/PVC; 使用动态卷的供应解决持久化
    - metadata:
        name: db-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
